

# School: KCA University
# Title: Student Exam Performance Prediction
# Author: Emmanuel Oduor Ochieng
# Date: 2025-06-11

# Predicting Student Exam Performance
This project aims to predict student exam performance using machine learning techniques. The dataset used is the Student Performance Data Set from the UCI Machine Learning Repository, which contains various features related to student demographics and study behavior.

## Problem Statement:
- You are provided with a dataset containing student demographic information and study behavior. Your task is to build and evaluate a machine learning model that predicts whether a student will pass or fail based on their features.

## Tasks and Marking Scheme

## Task Description	Marks
1. Data Preprocessing: load, clean, and explore the dataset (handle missing values, encode categoricals, etc.)	3 marks
2. Feature selection/engineering and data splitting	2 marks
3. Model training using at least two ML algorithms (e.g., logistic regression, decision trees, etc.)	4 marks
4. Evaluate the models using appropriate metrics (e.g., accuracy, F1-score, confusion matrix) and choose the better model	3 marks
5. GitHub Submission: Clear project structure, documented code, and informative README

# Project Structure

```{python}
# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
from sklearn.tree import DecisionTreeClassifier

```


# Step 1
# Data Preprocessing: Load, Clean, and Explore the Dataset

# Load the dataset

```{python}
#  Student Performance Data Set from UCI Machine Learning Repository
url = "https://raw.githubusercontent.com/KunjalJethwani/StudentPerformance/refs/heads/main/student-mat.csv"
data = pd.read_csv(url, sep=';')

# Display the first few rows of the dataset
data.head()
```

```{python}
# Check for missing values
data.isnull().sum()
```

```{python}
# Check the data types of each column
data.dtypes
```
```{python}
# Display basic statistics of the dataset
data.describe()
```
```{python}
# Determine the target variable
# 'G3' is the final grade (0-20) of the student, which we will use to predict pass/fail status
target = 'G3'

# Convert the target variable to binary (pass/fail) 
data[target] = np.where(data[target] >= 10, 1, 0) 

# Display the first few rows after target conversion
data.head()
```
```{python}
# Visualize the distribution of the target variable
target_variable = data[target]
sns.countplot(x=target_variable, data=data)
plt.title("Distribution of Pass/Fail")
plt.xlabel("Pass (1) / Fail (0)")
plt.ylabel("Count")
plt.show()
```

# Step 2
# Feature Selection/Engineering and Data Splitting
```{python}
# Select features and target variable
features = data.drop(columns=[target])
target_variable = data[target]

# Encode categorical variables
categorical_cols = features.select_dtypes(include=['object']).columns
for col in categorical_cols:
    le = LabelEncoder()
    features[col] = le.fit_transform(features[col])
```
```{python}
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target_variable, test_size=0.2, random_state=42)
```
```{python}
# Display the shapes of the training and testing sets
print(f"Training set shape: {X_train.shape}")
print(f"\nTesting set shape: {X_test.shape}")
```
# Step 3
# Model Training using Logistic Regression and Decision Trees

```{python}
# Initialize the models
logistic_model = LogisticRegression(max_iter=1000)
decision_tree_model = DecisionTreeClassifier(random_state=42)
```
```{python}
# Train the Logistic Regression model
logistic_model.fit(X_train, y_train)
```
```{python}
# Train the Decision Tree model
decision_tree_model.fit(X_train, y_train)
```

# Step 4
# Evaluate the Models
```{python}
# Import necessary libraries for evaluation
from sklearn.metrics import accuracy_score, f1_score, confusion_matrix, classification_report
# Evaluate the Logistic Regression model
y_pred_logistic = logistic_model.predict(X_test)
logistic_accuracy = accuracy_score(y_test, y_pred_logistic)
logistic_f1 = f1_score(y_test, y_pred_logistic)
logistic_confusion = confusion_matrix(y_test, y_pred_logistic)
print("Logistic Regression Model Evaluation:")
print(f"Accuracy: {logistic_accuracy * 100:.2f}%")
print(f"F1 Score: {logistic_f1 * 100:.2f}%")
print("Confusion Matrix:")
print(logistic_confusion)

```
```{python}
# Evaluate the Decision Tree model
y_pred_tree = decision_tree_model.predict(X_test)
tree_accuracy = accuracy_score(y_test, y_pred_tree)
tree_f1 = f1_score(y_test, y_pred_tree)
tree_confusion = confusion_matrix(y_test, y_pred_tree)
print("Decision Tree Model Evaluation:")
print(f"Accuracy: {tree_accuracy * 100:.2f}%")
print(f"F1 Score: {tree_f1 * 100:.2f}%")
print("Confusion Matrix:")
print(tree_confusion)
```

```{python}
# Plot confusion matrix for Logistic Regression
ConfusionMatrixDisplay.from_estimator(logistic_model, X_test, y_test, cmap=plt.cm.Blues)
plt.title("Confusion Matrix - Logistic Regression")
plt.show()
```
```{python}
# Plot confusion matrix for Decision Tree
ConfusionMatrixDisplay.from_estimator(decision_tree_model, X_test, y_test, cmap=plt.cm.Blues)
plt.title("Confusion Matrix - Decision Tree")
plt.show()
```
```{python}
# Visualize feature importance for Decision Tree
importances = decision_tree_model.feature_importances_
# Create a DataFrame for feature importance
feature_importance_df = pd.DataFrame({'Feature': features.columns, 'Importance': importances})
# Sort the DataFrame by importance
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)
# Plot feature importance
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title("Feature Importance - Decision Tree")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()
```
```{python}
# Visualize the correlation matrix
correlation_matrix = features.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Correlation Matrix Graph")
plt.show()
```

# Step 5
# GitHub Submission
# Ensure the project structure is clear and well-documented
```{python}
# Saving the trained models for future use
import joblib
# Save the Logistic Regression model
joblib.dump(logistic_model, 'logistic_regression_model.pkl')
# Save the Decision Tree model
joblib.dump(decision_tree_model, 'decision_tree_model.pkl')
# Ensure the models are saved correctly
print("Models saved successfully.")
# Load the models to verify they are saved correctly
loaded_logistic_model = joblib.load('logistic_regression_model.pkl')
loaded_decision_tree_model = joblib.load('decision_tree_model.pkl')
# Verify the loaded models
print("Logistic Regression Model Loaded:", loaded_logistic_model)
print("Decision Tree Model Loaded:", loaded_decision_tree_model)
```

# Summary of Model Performance and Conclusion
- We have trained two models: Logistic Regression and Decision Tree.
- The Logistic Regression model achieved an accuracy of approximately 94.94% and an F1 score of 96.08%.
- The Decision Tree model achieved an accuracy of approximately 88.61% and an F1 score of 91.26%.
- Based on the evaluation metrics, the Logistic Regression model outperforms the Decision Tree model in terms of accuracy and F1 score.
- We therefore conclude that the Logistic Regression model is the better choice for predicting student exam performance in this dataset. This model can be used to identify students at risk of failing and provide targeted interventions to improve their chances of success.
